// Code generated by Kitex v0.9.1. DO NOT EDIT.

package uploadfileservice

import (
	"context"
	"errors"
	uploadfile "github.com/S240/AetherCloud/app/uploadfile/kitex_gen/uploadfile"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"FastLoadFile": kitex.NewMethodInfo(
		fastLoadFileHandler,
		newFastLoadFileArgs,
		newFastLoadFileResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"InitUploadFile": kitex.NewMethodInfo(
		initUploadFileHandler,
		newInitUploadFileArgs,
		newInitUploadFileResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	uploadFileServiceServiceInfo                = NewServiceInfo()
	uploadFileServiceServiceInfoForClient       = NewServiceInfoForClient()
	uploadFileServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return uploadFileServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return uploadFileServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return uploadFileServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UploadFileService"
	handlerType := (*uploadfile.UploadFileService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "uploadfile",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func fastLoadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(uploadfile.FastLoadRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(uploadfile.UploadFileService).FastLoadFile(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FastLoadFileArgs:
		success, err := handler.(uploadfile.UploadFileService).FastLoadFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FastLoadFileResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFastLoadFileArgs() interface{} {
	return &FastLoadFileArgs{}
}

func newFastLoadFileResult() interface{} {
	return &FastLoadFileResult{}
}

type FastLoadFileArgs struct {
	Req *uploadfile.FastLoadRequest
}

func (p *FastLoadFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(uploadfile.FastLoadRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FastLoadFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FastLoadFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FastLoadFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FastLoadFileArgs) Unmarshal(in []byte) error {
	msg := new(uploadfile.FastLoadRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FastLoadFileArgs_Req_DEFAULT *uploadfile.FastLoadRequest

func (p *FastLoadFileArgs) GetReq() *uploadfile.FastLoadRequest {
	if !p.IsSetReq() {
		return FastLoadFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FastLoadFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FastLoadFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FastLoadFileResult struct {
	Success *uploadfile.FastLoadResponse
}

var FastLoadFileResult_Success_DEFAULT *uploadfile.FastLoadResponse

func (p *FastLoadFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(uploadfile.FastLoadResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FastLoadFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FastLoadFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FastLoadFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FastLoadFileResult) Unmarshal(in []byte) error {
	msg := new(uploadfile.FastLoadResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FastLoadFileResult) GetSuccess() *uploadfile.FastLoadResponse {
	if !p.IsSetSuccess() {
		return FastLoadFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FastLoadFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*uploadfile.FastLoadResponse)
}

func (p *FastLoadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FastLoadFileResult) GetResult() interface{} {
	return p.Success
}

func initUploadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(uploadfile.InituploadFileRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(uploadfile.UploadFileService).InitUploadFile(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *InitUploadFileArgs:
		success, err := handler.(uploadfile.UploadFileService).InitUploadFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*InitUploadFileResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newInitUploadFileArgs() interface{} {
	return &InitUploadFileArgs{}
}

func newInitUploadFileResult() interface{} {
	return &InitUploadFileResult{}
}

type InitUploadFileArgs struct {
	Req *uploadfile.InituploadFileRequest
}

func (p *InitUploadFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(uploadfile.InituploadFileRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *InitUploadFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *InitUploadFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *InitUploadFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *InitUploadFileArgs) Unmarshal(in []byte) error {
	msg := new(uploadfile.InituploadFileRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var InitUploadFileArgs_Req_DEFAULT *uploadfile.InituploadFileRequest

func (p *InitUploadFileArgs) GetReq() *uploadfile.InituploadFileRequest {
	if !p.IsSetReq() {
		return InitUploadFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *InitUploadFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InitUploadFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type InitUploadFileResult struct {
	Success *uploadfile.InituploadFileResponse
}

var InitUploadFileResult_Success_DEFAULT *uploadfile.InituploadFileResponse

func (p *InitUploadFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(uploadfile.InituploadFileResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *InitUploadFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *InitUploadFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *InitUploadFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *InitUploadFileResult) Unmarshal(in []byte) error {
	msg := new(uploadfile.InituploadFileResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *InitUploadFileResult) GetSuccess() *uploadfile.InituploadFileResponse {
	if !p.IsSetSuccess() {
		return InitUploadFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *InitUploadFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*uploadfile.InituploadFileResponse)
}

func (p *InitUploadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InitUploadFileResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FastLoadFile(ctx context.Context, Req *uploadfile.FastLoadRequest) (r *uploadfile.FastLoadResponse, err error) {
	var _args FastLoadFileArgs
	_args.Req = Req
	var _result FastLoadFileResult
	if err = p.c.Call(ctx, "FastLoadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InitUploadFile(ctx context.Context, Req *uploadfile.InituploadFileRequest) (r *uploadfile.InituploadFileResponse, err error) {
	var _args InitUploadFileArgs
	_args.Req = Req
	var _result InitUploadFileResult
	if err = p.c.Call(ctx, "InitUploadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
